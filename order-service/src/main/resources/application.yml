server.port: 8083

spring:
  application:
    name: order-service
  datasource:
    url: jdbc:mysql://${DB_MYSQL_HOST}:${DB_MYSQL_PORT}/microservice_order
    username: ${DB_MYSQL_USERNAME}
    password: ${DB_MYSQL_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  kafka:
    template:
      default-topic: notificationTopic
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: event:com.rashad.orderservice.event.OrderPlacedEvent
  sleuth:
    integration:
      enabled: true
    sampler:
      probability: 1.0
  zipkin:
    base-url: http://localhost:9411


eureka:
  client:
    service-url:
      defaultZone: http://eureka:password@localhost:8761/eureka

management:
  endpoint.health.show-details: always
  endpoints.web.exposure.include: "*"
  health.circuitbreakers.enabled: true

#Resilinece4j Properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        registerHealthIndicator: true
        event-consumer-buffer-size: 10
        sliding-window-type: COUNT_BASED
        sliding-window-size: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
  timelimiter:
    instances:
      inventory:
        timeout-duration: 3s
  retry:
    instances:
      inventory.max-attempts: 3
      inventory.wait-duration: 5s